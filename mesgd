#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa $(dirname 0)/ebin -noshell -noinput
%%
%% Copyright 2017 David J. Goehrig <dave@dloh.org>

%% starts a local node to issue commands from
%% we name these sequentially with system time
%% to avoid colliding with other command processes
connect(Server) ->
	net_kernel:start([ list_to_atom("cmd" ++ integer_to_list(erlang:system_time()) ++ "@localhost"), shortnames ]),
	set_cookie(),
	case net_kernel:connect_node(Server) of
		false -> 
			io:format("Failed to connect to ~p~n", [ Server ]),
			erlang:halt(0);
		true -> ok
	end.

%% process takes the command line arugments and performs
%% the associated action

%% status
process(_Server,["status","help"]) ->
	io:format("
mesgd [node] status
	
	The status command will print ok or fail while attempting
	to connect to the given node or each node in the cluster.
	This does not indicate that the node is actually down, 
	just that it was not able to connect to the node.

");

process(Server,["status"]) ->
	io:format("~p: ", [ Server ] ),
	case connect(Server) of
		ok -> green(ok);
		_ -> red(fail)
	end,
	eol();

%% observer
process(_Server,["observer","help"]) ->
	io:format("
mesgd [node] observer

	This command starts the observer on the given node.
	The Erlang observer is a standard gui for monitoring
	Erlang systems.

");

process(Server,["observer"]) ->
	ok = connect(Server),
	rpc:call(Server,observer,start,[]);

%% console
process(_Server,["console","help"]) ->
	io:format("
mesgd [node] console

	The console command connects to an erlang shell on the given node.
	It will take over the tty of the session and allows for total
	destruction of a node if you're into that sort of thing.

");

process(Server,["console"]) ->
	ok = connect(Server),
	process_flag(trap_exit,true),
	Shell = user_drv:start(['tty_sl -c -e',{Server,shell,start,[]}]),
	true = erlang:link(Shell),
	receive
		{ 'EXIT', Shell, _ } -> ok
	end,
	erlang:halt(0);



%% start
process(_Server,["start","help"]) ->
	io:format("
mesgd [node] start ]
	
	The start command will start a mesgd application on the given node.
	Epmd must be running on the host already for this command to work.
	Instructions for setting up epmd on boot can be found in the README.

");	

process(mesgd@localhost,["start"]) ->
	application:load(mesgd),
	mesgd:start(),
	loop();

process(Server,["start"]) ->
	ok = connect(Server),
	rpc:call(Server,application,load,[mesgd]),
	rpc:call(Server,mesgd,start,[]);

%% stop
process(_Server,["stop","help"]) ->
	io:format("
mesgd [node] stop

	The stop command will stop a mesgd application on the given node.
	It will not stop epmd on the remote node, so you may call start 
	to start it again.

");

process(Server,["stop"]) ->
	case connect(Server) of
		ok ->
			rpc:call(Server, mnesia, stop, []),
			rpc:call(Server, mesgd, stop, []),
			rpc:call(Server, erlang, halt, [0]),
			green(ok),
			eol();
		fail ->
			red(fail),
			eol()
	end;
		
%% This needs to be the last state in the process funciton, as it
%% is a catchall that prints out the status message.  If you are
%% adding new methods to it please add them above, and amend this
%% to reflect the new usage.
process(_Server,_) ->
	io:format("
usage: mesgd [node] [start|stop|status|console|observer]

	help 				- this message

	command help			- help for the given command

	start 				- start the server on a node

	stop 				- stop a node

	status 				- return the status of a node

	console 			- connects a console to a node

	observer 			- run the observer on a node

").

set_cookie() ->
	case application:get_env(mesgd,cookie) of
		{ ok, Cookie } ->
			erlang:set_cookie(node(),Cookie);
		_ ->
			ok
	end.

eol() ->
	io:format("~n").

green(Term) ->
	io:format([ 16#1b | "[;32m"]),
	io:format("~p", [ Term ]),
	io:format([ 16#1b | "[;39m" ]).

red(Term) ->
	io:format([ 16#1b | "[;31m"]),
	io:format("~p", [ Term ]),
	io:format([ 16#1b | "[;39m" ]).

find_server([]) -> 
	{ mesgd@localhost, []};
find_server(Args = [ Host | Args2 ]) ->
	case string:chr(Host,$@) of
		0 -> { mesgd@localhost, Args };
		_ -> { list_to_atom(Host), Args2 }
	end.

loop() ->
	receive
		Msg -> io:format("Got message ~p~n", [ Msg  ])
	after
		1000 -> io:format(".")
	end,
	loop().

main(Args) ->
	{ok, [[Home]]} = init:get_argument(home),
	code:add_patha(Home ++ "/.beamer"),
	code:load_file(beamer),
	%% always start a temporary node that we can discard
	Script = escript:script_name(),
	io:format("running ~p~n", [ Script] ),
	io:format("Directory ~p~n", [ filename:dirname(Script) ]),
	io:format("Got args ~p~n", [ Args ]),
	{ Host, Args2 } = find_server(Args),
	io:format("Found host ~p~n", [ Host ]),
	process(Host,Args2).
